{-
   Kubernetes

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   Kubernetes API version: release-1.16
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Kubernetes.OpenAPI.API.CertificatesV1beta1
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Kubernetes.OpenAPI.API.CertificatesV1beta1 where

import Kubernetes.OpenAPI.Core
import Kubernetes.OpenAPI.MimeTypes
import Kubernetes.OpenAPI.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** CertificatesV1beta1

-- *** createCertificateSigningRequest

-- | @POST \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests@
-- 
-- create a CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
createCertificateSigningRequest 
  :: (Consumes CreateCertificateSigningRequest contentType, MimeRender contentType V1beta1CertificateSigningRequest)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> V1beta1CertificateSigningRequest -- ^ "body"
  -> KubernetesRequest CreateCertificateSigningRequest contentType V1beta1CertificateSigningRequest accept
createCertificateSigningRequest _  _ body =
  _mkRequest "POST" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data CreateCertificateSigningRequest 
instance HasBodyParam CreateCertificateSigningRequest V1beta1CertificateSigningRequest 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam CreateCertificateSigningRequest Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam CreateCertificateSigningRequest DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
instance HasOptionalParam CreateCertificateSigningRequest FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `setQuery` toQuery ("fieldManager", Just xs)
    
-- | @*/*@
instance MimeType mtype => Consumes CreateCertificateSigningRequest mtype

-- | @application/json@
instance Produces CreateCertificateSigningRequest MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces CreateCertificateSigningRequest MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces CreateCertificateSigningRequest MimeYaml


-- *** deleteCertificateSigningRequest

-- | @DELETE \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}@
-- 
-- delete a CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
deleteCertificateSigningRequest 
  :: (Consumes DeleteCertificateSigningRequest contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest DeleteCertificateSigningRequest contentType V1Status accept
deleteCertificateSigningRequest _  _ (Name name) =
  _mkRequest "DELETE" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data DeleteCertificateSigningRequest 
instance HasBodyParam DeleteCertificateSigningRequest V1DeleteOptions 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam DeleteCertificateSigningRequest Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam DeleteCertificateSigningRequest DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "gracePeriodSeconds" - The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
instance HasOptionalParam DeleteCertificateSigningRequest GracePeriodSeconds where
  applyOptionalParam req (GracePeriodSeconds xs) =
    req `setQuery` toQuery ("gracePeriodSeconds", Just xs)

-- | /Optional Param/ "orphanDependents" - Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
instance HasOptionalParam DeleteCertificateSigningRequest OrphanDependents where
  applyOptionalParam req (OrphanDependents xs) =
    req `setQuery` toQuery ("orphanDependents", Just xs)

-- | /Optional Param/ "propagationPolicy" - Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
instance HasOptionalParam DeleteCertificateSigningRequest PropagationPolicy where
  applyOptionalParam req (PropagationPolicy xs) =
    req `setQuery` toQuery ("propagationPolicy", Just xs)
    
-- | @*/*@
instance MimeType mtype => Consumes DeleteCertificateSigningRequest mtype

-- | @application/json@
instance Produces DeleteCertificateSigningRequest MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces DeleteCertificateSigningRequest MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces DeleteCertificateSigningRequest MimeYaml


-- *** deleteCollectionCertificateSigningRequest

-- | @DELETE \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests@
-- 
-- delete collection of CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
deleteCollectionCertificateSigningRequest 
  :: (Consumes DeleteCollectionCertificateSigningRequest contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> KubernetesRequest DeleteCollectionCertificateSigningRequest contentType V1Status accept
deleteCollectionCertificateSigningRequest _  _ =
  _mkRequest "DELETE" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data DeleteCollectionCertificateSigningRequest 
instance HasBodyParam DeleteCollectionCertificateSigningRequest V1DeleteOptions 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "continue" - The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest Continue where
  applyOptionalParam req (Continue xs) =
    req `setQuery` toQuery ("continue", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam DeleteCollectionCertificateSigningRequest DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldSelector" - A selector to restrict the list of returned objects by their fields. Defaults to everything.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest FieldSelector where
  applyOptionalParam req (FieldSelector xs) =
    req `setQuery` toQuery ("fieldSelector", Just xs)

-- | /Optional Param/ "gracePeriodSeconds" - The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest GracePeriodSeconds where
  applyOptionalParam req (GracePeriodSeconds xs) =
    req `setQuery` toQuery ("gracePeriodSeconds", Just xs)

-- | /Optional Param/ "labelSelector" - A selector to restrict the list of returned objects by their labels. Defaults to everything.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest LabelSelector where
  applyOptionalParam req (LabelSelector xs) =
    req `setQuery` toQuery ("labelSelector", Just xs)

-- | /Optional Param/ "limit" - limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "orphanDependents" - Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest OrphanDependents where
  applyOptionalParam req (OrphanDependents xs) =
    req `setQuery` toQuery ("orphanDependents", Just xs)

-- | /Optional Param/ "propagationPolicy" - Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest PropagationPolicy where
  applyOptionalParam req (PropagationPolicy xs) =
    req `setQuery` toQuery ("propagationPolicy", Just xs)

-- | /Optional Param/ "resourceVersion" - When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest ResourceVersion where
  applyOptionalParam req (ResourceVersion xs) =
    req `setQuery` toQuery ("resourceVersion", Just xs)

-- | /Optional Param/ "timeoutSeconds" - Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
instance HasOptionalParam DeleteCollectionCertificateSigningRequest TimeoutSeconds where
  applyOptionalParam req (TimeoutSeconds xs) =
    req `setQuery` toQuery ("timeoutSeconds", Just xs)
    
-- | @*/*@
instance MimeType mtype => Consumes DeleteCollectionCertificateSigningRequest mtype

-- | @application/json@
instance Produces DeleteCollectionCertificateSigningRequest MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces DeleteCollectionCertificateSigningRequest MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces DeleteCollectionCertificateSigningRequest MimeYaml


-- *** getAPIResources

-- | @GET \/apis\/certificates.k8s.io\/v1beta1\/@
-- 
-- get available resources
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
getAPIResources 
  :: Accept accept -- ^ request accept ('MimeType')
  -> KubernetesRequest GetAPIResources MimeNoContent V1APIResourceList accept
getAPIResources  _ =
  _mkRequest "GET" ["/apis/certificates.k8s.io/v1beta1/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data GetAPIResources  
-- | @application/json@
instance Produces GetAPIResources MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces GetAPIResources MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces GetAPIResources MimeYaml


-- *** listCertificateSigningRequest

-- | @GET \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests@
-- 
-- list or watch objects of kind CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
listCertificateSigningRequest 
  :: Accept accept -- ^ request accept ('MimeType')
  -> KubernetesRequest ListCertificateSigningRequest MimeNoContent V1beta1CertificateSigningRequestList accept
listCertificateSigningRequest  _ =
  _mkRequest "GET" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data ListCertificateSigningRequest  

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ListCertificateSigningRequest Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "allowWatchBookmarks" - allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is beta.
instance HasOptionalParam ListCertificateSigningRequest AllowWatchBookmarks where
  applyOptionalParam req (AllowWatchBookmarks xs) =
    req `setQuery` toQuery ("allowWatchBookmarks", Just xs)

-- | /Optional Param/ "continue" - The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
instance HasOptionalParam ListCertificateSigningRequest Continue where
  applyOptionalParam req (Continue xs) =
    req `setQuery` toQuery ("continue", Just xs)

-- | /Optional Param/ "fieldSelector" - A selector to restrict the list of returned objects by their fields. Defaults to everything.
instance HasOptionalParam ListCertificateSigningRequest FieldSelector where
  applyOptionalParam req (FieldSelector xs) =
    req `setQuery` toQuery ("fieldSelector", Just xs)

-- | /Optional Param/ "labelSelector" - A selector to restrict the list of returned objects by their labels. Defaults to everything.
instance HasOptionalParam ListCertificateSigningRequest LabelSelector where
  applyOptionalParam req (LabelSelector xs) =
    req `setQuery` toQuery ("labelSelector", Just xs)

-- | /Optional Param/ "limit" - limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
instance HasOptionalParam ListCertificateSigningRequest Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "resourceVersion" - When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
instance HasOptionalParam ListCertificateSigningRequest ResourceVersion where
  applyOptionalParam req (ResourceVersion xs) =
    req `setQuery` toQuery ("resourceVersion", Just xs)

-- | /Optional Param/ "timeoutSeconds" - Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
instance HasOptionalParam ListCertificateSigningRequest TimeoutSeconds where
  applyOptionalParam req (TimeoutSeconds xs) =
    req `setQuery` toQuery ("timeoutSeconds", Just xs)

-- | /Optional Param/ "watch" - Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
instance HasOptionalParam ListCertificateSigningRequest Watch where
  applyOptionalParam req (Watch xs) =
    req `setQuery` toQuery ("watch", Just xs)
-- | @application/json@
instance Produces ListCertificateSigningRequest MimeJSON
-- | @application/json;stream=watch@
instance Produces ListCertificateSigningRequest MimeJsonstreamwatch
-- | @application/vnd.kubernetes.protobuf@
instance Produces ListCertificateSigningRequest MimeVndKubernetesProtobuf
-- | @application/vnd.kubernetes.protobuf;stream=watch@
instance Produces ListCertificateSigningRequest MimeVndKubernetesProtobufstreamwatch
-- | @application/yaml@
instance Produces ListCertificateSigningRequest MimeYaml


-- *** patchCertificateSigningRequest

-- | @PATCH \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}@
-- 
-- partially update the specified CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
patchCertificateSigningRequest 
  :: (Consumes PatchCertificateSigningRequest contentType, MimeRender contentType Body)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Body -- ^ "body"
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest PatchCertificateSigningRequest contentType V1beta1CertificateSigningRequest accept
patchCertificateSigningRequest _  _ body (Name name) =
  _mkRequest "PATCH" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data PatchCertificateSigningRequest 
instance HasBodyParam PatchCertificateSigningRequest Body 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam PatchCertificateSigningRequest Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam PatchCertificateSigningRequest DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
instance HasOptionalParam PatchCertificateSigningRequest FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `setQuery` toQuery ("fieldManager", Just xs)

-- | /Optional Param/ "force" - Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
instance HasOptionalParam PatchCertificateSigningRequest Force where
  applyOptionalParam req (Force xs) =
    req `setQuery` toQuery ("force", Just xs)

-- | @application/apply-patch+yaml@
instance Consumes PatchCertificateSigningRequest MimeApplyPatchyaml
-- | @application/json-patch+json@
instance Consumes PatchCertificateSigningRequest MimeJsonPatchjson
-- | @application/merge-patch+json@
instance Consumes PatchCertificateSigningRequest MimeMergePatchjson
-- | @application/strategic-merge-patch+json@
instance Consumes PatchCertificateSigningRequest MimeStrategicMergePatchjson

-- | @application/json@
instance Produces PatchCertificateSigningRequest MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces PatchCertificateSigningRequest MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces PatchCertificateSigningRequest MimeYaml


-- *** patchCertificateSigningRequestStatus

-- | @PATCH \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}\/status@
-- 
-- partially update status of the specified CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
patchCertificateSigningRequestStatus 
  :: (Consumes PatchCertificateSigningRequestStatus contentType, MimeRender contentType Body)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Body -- ^ "body"
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest PatchCertificateSigningRequestStatus contentType V1beta1CertificateSigningRequest accept
patchCertificateSigningRequestStatus _  _ body (Name name) =
  _mkRequest "PATCH" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data PatchCertificateSigningRequestStatus 
instance HasBodyParam PatchCertificateSigningRequestStatus Body 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam PatchCertificateSigningRequestStatus Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam PatchCertificateSigningRequestStatus DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
instance HasOptionalParam PatchCertificateSigningRequestStatus FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `setQuery` toQuery ("fieldManager", Just xs)

-- | /Optional Param/ "force" - Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
instance HasOptionalParam PatchCertificateSigningRequestStatus Force where
  applyOptionalParam req (Force xs) =
    req `setQuery` toQuery ("force", Just xs)

-- | @application/apply-patch+yaml@
instance Consumes PatchCertificateSigningRequestStatus MimeApplyPatchyaml
-- | @application/json-patch+json@
instance Consumes PatchCertificateSigningRequestStatus MimeJsonPatchjson
-- | @application/merge-patch+json@
instance Consumes PatchCertificateSigningRequestStatus MimeMergePatchjson
-- | @application/strategic-merge-patch+json@
instance Consumes PatchCertificateSigningRequestStatus MimeStrategicMergePatchjson

-- | @application/json@
instance Produces PatchCertificateSigningRequestStatus MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces PatchCertificateSigningRequestStatus MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces PatchCertificateSigningRequestStatus MimeYaml


-- *** readCertificateSigningRequest

-- | @GET \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}@
-- 
-- read the specified CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
readCertificateSigningRequest 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest ReadCertificateSigningRequest MimeNoContent V1beta1CertificateSigningRequest accept
readCertificateSigningRequest  _ (Name name) =
  _mkRequest "GET" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data ReadCertificateSigningRequest  

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReadCertificateSigningRequest Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "exact" - Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
instance HasOptionalParam ReadCertificateSigningRequest Exact where
  applyOptionalParam req (Exact xs) =
    req `setQuery` toQuery ("exact", Just xs)

-- | /Optional Param/ "export" - Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
instance HasOptionalParam ReadCertificateSigningRequest Export where
  applyOptionalParam req (Export xs) =
    req `setQuery` toQuery ("export", Just xs)
-- | @application/json@
instance Produces ReadCertificateSigningRequest MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReadCertificateSigningRequest MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReadCertificateSigningRequest MimeYaml


-- *** readCertificateSigningRequestStatus

-- | @GET \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}\/status@
-- 
-- read status of the specified CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
readCertificateSigningRequestStatus 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest ReadCertificateSigningRequestStatus MimeNoContent V1beta1CertificateSigningRequest accept
readCertificateSigningRequestStatus  _ (Name name) =
  _mkRequest "GET" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data ReadCertificateSigningRequestStatus  

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReadCertificateSigningRequestStatus Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)
-- | @application/json@
instance Produces ReadCertificateSigningRequestStatus MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReadCertificateSigningRequestStatus MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReadCertificateSigningRequestStatus MimeYaml


-- *** replaceCertificateSigningRequest

-- | @PUT \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}@
-- 
-- replace the specified CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
replaceCertificateSigningRequest 
  :: (Consumes ReplaceCertificateSigningRequest contentType, MimeRender contentType V1beta1CertificateSigningRequest)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> V1beta1CertificateSigningRequest -- ^ "body"
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest ReplaceCertificateSigningRequest contentType V1beta1CertificateSigningRequest accept
replaceCertificateSigningRequest _  _ body (Name name) =
  _mkRequest "PUT" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data ReplaceCertificateSigningRequest 
instance HasBodyParam ReplaceCertificateSigningRequest V1beta1CertificateSigningRequest 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReplaceCertificateSigningRequest Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam ReplaceCertificateSigningRequest DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
instance HasOptionalParam ReplaceCertificateSigningRequest FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `setQuery` toQuery ("fieldManager", Just xs)
    
-- | @*/*@
instance MimeType mtype => Consumes ReplaceCertificateSigningRequest mtype

-- | @application/json@
instance Produces ReplaceCertificateSigningRequest MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReplaceCertificateSigningRequest MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReplaceCertificateSigningRequest MimeYaml


-- *** replaceCertificateSigningRequestApproval

-- | @PUT \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}\/approval@
-- 
-- replace approval of the specified CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
replaceCertificateSigningRequestApproval 
  :: (Consumes ReplaceCertificateSigningRequestApproval contentType, MimeRender contentType V1beta1CertificateSigningRequest)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> V1beta1CertificateSigningRequest -- ^ "body"
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest ReplaceCertificateSigningRequestApproval contentType V1beta1CertificateSigningRequest accept
replaceCertificateSigningRequestApproval _  _ body (Name name) =
  _mkRequest "PUT" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name,"/approval"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data ReplaceCertificateSigningRequestApproval 
instance HasBodyParam ReplaceCertificateSigningRequestApproval V1beta1CertificateSigningRequest 

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam ReplaceCertificateSigningRequestApproval DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
instance HasOptionalParam ReplaceCertificateSigningRequestApproval FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `setQuery` toQuery ("fieldManager", Just xs)

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReplaceCertificateSigningRequestApproval Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)
    
-- | @*/*@
instance MimeType mtype => Consumes ReplaceCertificateSigningRequestApproval mtype

-- | @application/json@
instance Produces ReplaceCertificateSigningRequestApproval MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReplaceCertificateSigningRequestApproval MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReplaceCertificateSigningRequestApproval MimeYaml


-- *** replaceCertificateSigningRequestStatus

-- | @PUT \/apis\/certificates.k8s.io\/v1beta1\/certificatesigningrequests\/{name}\/status@
-- 
-- replace status of the specified CertificateSigningRequest
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
replaceCertificateSigningRequestStatus 
  :: (Consumes ReplaceCertificateSigningRequestStatus contentType, MimeRender contentType V1beta1CertificateSigningRequest)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> V1beta1CertificateSigningRequest -- ^ "body"
  -> Name -- ^ "name" -  name of the CertificateSigningRequest
  -> KubernetesRequest ReplaceCertificateSigningRequestStatus contentType V1beta1CertificateSigningRequest accept
replaceCertificateSigningRequestStatus _  _ body (Name name) =
  _mkRequest "PUT" ["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/",toPath name,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data ReplaceCertificateSigningRequestStatus 
instance HasBodyParam ReplaceCertificateSigningRequestStatus V1beta1CertificateSigningRequest 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReplaceCertificateSigningRequestStatus Pretty where
  applyOptionalParam req (Pretty xs) =
    req `setQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam ReplaceCertificateSigningRequestStatus DryRun where
  applyOptionalParam req (DryRun xs) =
    req `setQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
instance HasOptionalParam ReplaceCertificateSigningRequestStatus FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `setQuery` toQuery ("fieldManager", Just xs)
    
-- | @*/*@
instance MimeType mtype => Consumes ReplaceCertificateSigningRequestStatus mtype

-- | @application/json@
instance Produces ReplaceCertificateSigningRequestStatus MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReplaceCertificateSigningRequestStatus MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReplaceCertificateSigningRequestStatus MimeYaml

